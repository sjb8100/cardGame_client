/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Room : RoomBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Room.def
	public abstract class RoomBase : Entity
	{
		public EntityBaseEntityCall_RoomBase baseEntityCall = null;
		public EntityCellEntityCall_RoomBase cellEntityCall = null;

		public List<Int32> hiddenCards = new List<Int32>();
		public virtual void onHiddenCardsChanged(List<Int32> oldValue) {}
		public List<Int32> hiddenCardsOpen = new List<Int32>();
		public virtual void onHiddenCardsOpenChanged(List<Int32> oldValue) {}
		public Int16 highestPoint = 0;
		public virtual void onHighestPointChanged(Int16 oldValue) {}
		public string intro = "";
		public virtual void onIntroChanged(string oldValue) {}
		public Int16 isGameOver = 0;
		public virtual void onIsGameOverChanged(Int16 oldValue) {}
		public Int16 isPlaying = 0;
		public virtual void onIsPlayingChanged(Int16 oldValue) {}
		public Int16 landlordIndex = 0;
		public virtual void onLandlordIndexChanged(Int16 oldValue) {}
		public List<Int32> lastPlayCards = new List<Int32>();
		public virtual void onLastPlayCardsChanged(List<Int32> oldValue) {}
		public Int16 lastPlayIndex = 0;
		public virtual void onLastPlayIndexChanged(Int16 oldValue) {}
		public string name = "";
		public virtual void onNameChanged(string oldValue) {}
		public Int16 openCard = 0;
		public virtual void onOpenCardChanged(Int16 oldValue) {}
		public Int16 playIndex = 0;
		public virtual void onPlayIndexChanged(Int16 oldValue) {}
		public Int32 raiseIndex = 0;
		public virtual void onRaiseIndexChanged(Int32 oldValue) {}
		public UInt64 roomKey = 0;
		public virtual void onRoomKeyChanged(UInt64 oldValue) {}
		public SEATS_INFO seatsData = new SEATS_INFO();
		public virtual void onSeatsDataChanged(SEATS_INFO oldValue) {}


		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_RoomBase();
			baseEntityCall.id = id;
			baseEntityCall.className = className;
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_RoomBase();
			cellEntityCall.id = id;
			cellEntityCall.className = className;
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void onRemoteMethodCall(Method method, MemoryStream stream)
		{
			switch(method.methodUtype)
			{
				default:
					break;
			};
		}

		public override void onUpdatePropertys(Property prop, MemoryStream stream)
		{
			switch(prop.properUtype)
			{
				case 40001:
					Vector3 oldval_direction = direction;
					direction = stream.readVector3();

					if(prop.isBase())
					{
						if(inited)
							onDirectionChanged(oldval_direction);
					}
					else
					{
						if(inWorld)
							onDirectionChanged(oldval_direction);
					}

					break;
				case 23:
					List<Int32> oldval_hiddenCards = hiddenCards;
					hiddenCards = ((DATATYPE_AnonymousArray_31)EntityDef.id2datatypes[31]).createFromStreamEx(stream);

					if(prop.isBase())
					{
						if(inited)
							onHiddenCardsChanged(oldval_hiddenCards);
					}
					else
					{
						if(inWorld)
							onHiddenCardsChanged(oldval_hiddenCards);
					}

					break;
				case 24:
					List<Int32> oldval_hiddenCardsOpen = hiddenCardsOpen;
					hiddenCardsOpen = ((DATATYPE_AnonymousArray_32)EntityDef.id2datatypes[32]).createFromStreamEx(stream);

					if(prop.isBase())
					{
						if(inited)
							onHiddenCardsOpenChanged(oldval_hiddenCardsOpen);
					}
					else
					{
						if(inWorld)
							onHiddenCardsOpenChanged(oldval_hiddenCardsOpen);
					}

					break;
				case 25:
					Int16 oldval_highestPoint = highestPoint;
					highestPoint = stream.readInt16();

					if(prop.isBase())
					{
						if(inited)
							onHighestPointChanged(oldval_highestPoint);
					}
					else
					{
						if(inWorld)
							onHighestPointChanged(oldval_highestPoint);
					}

					break;
				case 18:
					string oldval_intro = intro;
					intro = stream.readUnicode();

					if(prop.isBase())
					{
						if(inited)
							onIntroChanged(oldval_intro);
					}
					else
					{
						if(inWorld)
							onIntroChanged(oldval_intro);
					}

					break;
				case 30:
					Int16 oldval_isGameOver = isGameOver;
					isGameOver = stream.readInt16();

					if(prop.isBase())
					{
						if(inited)
							onIsGameOverChanged(oldval_isGameOver);
					}
					else
					{
						if(inWorld)
							onIsGameOverChanged(oldval_isGameOver);
					}

					break;
				case 19:
					Int16 oldval_isPlaying = isPlaying;
					isPlaying = stream.readInt16();

					if(prop.isBase())
					{
						if(inited)
							onIsPlayingChanged(oldval_isPlaying);
					}
					else
					{
						if(inWorld)
							onIsPlayingChanged(oldval_isPlaying);
					}

					break;
				case 26:
					Int16 oldval_landlordIndex = landlordIndex;
					landlordIndex = stream.readInt16();

					if(prop.isBase())
					{
						if(inited)
							onLandlordIndexChanged(oldval_landlordIndex);
					}
					else
					{
						if(inWorld)
							onLandlordIndexChanged(oldval_landlordIndex);
					}

					break;
				case 29:
					List<Int32> oldval_lastPlayCards = lastPlayCards;
					lastPlayCards = ((DATATYPE_AnonymousArray_33)EntityDef.id2datatypes[33]).createFromStreamEx(stream);

					if(prop.isBase())
					{
						if(inited)
							onLastPlayCardsChanged(oldval_lastPlayCards);
					}
					else
					{
						if(inWorld)
							onLastPlayCardsChanged(oldval_lastPlayCards);
					}

					break;
				case 28:
					Int16 oldval_lastPlayIndex = lastPlayIndex;
					lastPlayIndex = stream.readInt16();

					if(prop.isBase())
					{
						if(inited)
							onLastPlayIndexChanged(oldval_lastPlayIndex);
					}
					else
					{
						if(inWorld)
							onLastPlayIndexChanged(oldval_lastPlayIndex);
					}

					break;
				case 17:
					string oldval_name = name;
					name = stream.readUnicode();

					if(prop.isBase())
					{
						if(inited)
							onNameChanged(oldval_name);
					}
					else
					{
						if(inWorld)
							onNameChanged(oldval_name);
					}

					break;
				case 21:
					Int16 oldval_openCard = openCard;
					openCard = stream.readInt16();

					if(prop.isBase())
					{
						if(inited)
							onOpenCardChanged(oldval_openCard);
					}
					else
					{
						if(inWorld)
							onOpenCardChanged(oldval_openCard);
					}

					break;
				case 27:
					Int16 oldval_playIndex = playIndex;
					playIndex = stream.readInt16();

					if(prop.isBase())
					{
						if(inited)
							onPlayIndexChanged(oldval_playIndex);
					}
					else
					{
						if(inWorld)
							onPlayIndexChanged(oldval_playIndex);
					}

					break;
				case 40000:
					Vector3 oldval_position = position;
					position = stream.readVector3();

					if(prop.isBase())
					{
						if(inited)
							onPositionChanged(oldval_position);
					}
					else
					{
						if(inWorld)
							onPositionChanged(oldval_position);
					}

					break;
				case 22:
					Int32 oldval_raiseIndex = raiseIndex;
					raiseIndex = stream.readInt32();

					if(prop.isBase())
					{
						if(inited)
							onRaiseIndexChanged(oldval_raiseIndex);
					}
					else
					{
						if(inWorld)
							onRaiseIndexChanged(oldval_raiseIndex);
					}

					break;
				case 16:
					UInt64 oldval_roomKey = roomKey;
					roomKey = stream.readUint64();

					if(prop.isBase())
					{
						if(inited)
							onRoomKeyChanged(oldval_roomKey);
					}
					else
					{
						if(inWorld)
							onRoomKeyChanged(oldval_roomKey);
					}

					break;
				case 20:
					SEATS_INFO oldval_seatsData = seatsData;
					seatsData = ((DATATYPE_SEATS_INFO)EntityDef.id2datatypes[23]).createFromStreamEx(stream);

					if(prop.isBase())
					{
						if(inited)
							onSeatsDataChanged(oldval_seatsData);
					}
					else
					{
						if(inWorld)
							onSeatsDataChanged(oldval_seatsData);
					}

					break;
					case 40002:
						stream.readUint32();
						break;
				default:
					break;
			};
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs[className];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[1];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			List<Int32> oldval_hiddenCards = hiddenCards;
			Property prop_hiddenCards = pdatas[3];
			if(prop_hiddenCards.isBase())
			{
				if(inited && !inWorld)
					onHiddenCardsChanged(oldval_hiddenCards);
			}
			else
			{
				if(inWorld)
				{
					if(prop_hiddenCards.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onHiddenCardsChanged(oldval_hiddenCards);
					}
				}
			}

			List<Int32> oldval_hiddenCardsOpen = hiddenCardsOpen;
			Property prop_hiddenCardsOpen = pdatas[4];
			if(prop_hiddenCardsOpen.isBase())
			{
				if(inited && !inWorld)
					onHiddenCardsOpenChanged(oldval_hiddenCardsOpen);
			}
			else
			{
				if(inWorld)
				{
					if(prop_hiddenCardsOpen.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onHiddenCardsOpenChanged(oldval_hiddenCardsOpen);
					}
				}
			}

			Int16 oldval_highestPoint = highestPoint;
			Property prop_highestPoint = pdatas[5];
			if(prop_highestPoint.isBase())
			{
				if(inited && !inWorld)
					onHighestPointChanged(oldval_highestPoint);
			}
			else
			{
				if(inWorld)
				{
					if(prop_highestPoint.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onHighestPointChanged(oldval_highestPoint);
					}
				}
			}

			string oldval_intro = intro;
			Property prop_intro = pdatas[6];
			if(prop_intro.isBase())
			{
				if(inited && !inWorld)
					onIntroChanged(oldval_intro);
			}
			else
			{
				if(inWorld)
				{
					if(prop_intro.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onIntroChanged(oldval_intro);
					}
				}
			}

			Int16 oldval_isGameOver = isGameOver;
			Property prop_isGameOver = pdatas[7];
			if(prop_isGameOver.isBase())
			{
				if(inited && !inWorld)
					onIsGameOverChanged(oldval_isGameOver);
			}
			else
			{
				if(inWorld)
				{
					if(prop_isGameOver.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onIsGameOverChanged(oldval_isGameOver);
					}
				}
			}

			Int16 oldval_isPlaying = isPlaying;
			Property prop_isPlaying = pdatas[8];
			if(prop_isPlaying.isBase())
			{
				if(inited && !inWorld)
					onIsPlayingChanged(oldval_isPlaying);
			}
			else
			{
				if(inWorld)
				{
					if(prop_isPlaying.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onIsPlayingChanged(oldval_isPlaying);
					}
				}
			}

			Int16 oldval_landlordIndex = landlordIndex;
			Property prop_landlordIndex = pdatas[9];
			if(prop_landlordIndex.isBase())
			{
				if(inited && !inWorld)
					onLandlordIndexChanged(oldval_landlordIndex);
			}
			else
			{
				if(inWorld)
				{
					if(prop_landlordIndex.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onLandlordIndexChanged(oldval_landlordIndex);
					}
				}
			}

			List<Int32> oldval_lastPlayCards = lastPlayCards;
			Property prop_lastPlayCards = pdatas[10];
			if(prop_lastPlayCards.isBase())
			{
				if(inited && !inWorld)
					onLastPlayCardsChanged(oldval_lastPlayCards);
			}
			else
			{
				if(inWorld)
				{
					if(prop_lastPlayCards.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onLastPlayCardsChanged(oldval_lastPlayCards);
					}
				}
			}

			Int16 oldval_lastPlayIndex = lastPlayIndex;
			Property prop_lastPlayIndex = pdatas[11];
			if(prop_lastPlayIndex.isBase())
			{
				if(inited && !inWorld)
					onLastPlayIndexChanged(oldval_lastPlayIndex);
			}
			else
			{
				if(inWorld)
				{
					if(prop_lastPlayIndex.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onLastPlayIndexChanged(oldval_lastPlayIndex);
					}
				}
			}

			string oldval_name = name;
			Property prop_name = pdatas[12];
			if(prop_name.isBase())
			{
				if(inited && !inWorld)
					onNameChanged(oldval_name);
			}
			else
			{
				if(inWorld)
				{
					if(prop_name.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onNameChanged(oldval_name);
					}
				}
			}

			Int16 oldval_openCard = openCard;
			Property prop_openCard = pdatas[13];
			if(prop_openCard.isBase())
			{
				if(inited && !inWorld)
					onOpenCardChanged(oldval_openCard);
			}
			else
			{
				if(inWorld)
				{
					if(prop_openCard.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onOpenCardChanged(oldval_openCard);
					}
				}
			}

			Int16 oldval_playIndex = playIndex;
			Property prop_playIndex = pdatas[14];
			if(prop_playIndex.isBase())
			{
				if(inited && !inWorld)
					onPlayIndexChanged(oldval_playIndex);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playIndex.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayIndexChanged(oldval_playIndex);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[0];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

			Int32 oldval_raiseIndex = raiseIndex;
			Property prop_raiseIndex = pdatas[15];
			if(prop_raiseIndex.isBase())
			{
				if(inited && !inWorld)
					onRaiseIndexChanged(oldval_raiseIndex);
			}
			else
			{
				if(inWorld)
				{
					if(prop_raiseIndex.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRaiseIndexChanged(oldval_raiseIndex);
					}
				}
			}

			UInt64 oldval_roomKey = roomKey;
			Property prop_roomKey = pdatas[16];
			if(prop_roomKey.isBase())
			{
				if(inited && !inWorld)
					onRoomKeyChanged(oldval_roomKey);
			}
			else
			{
				if(inWorld)
				{
					if(prop_roomKey.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoomKeyChanged(oldval_roomKey);
					}
				}
			}

			SEATS_INFO oldval_seatsData = seatsData;
			Property prop_seatsData = pdatas[17];
			if(prop_seatsData.isBase())
			{
				if(inited && !inWorld)
					onSeatsDataChanged(oldval_seatsData);
			}
			else
			{
				if(inWorld)
				{
					if(prop_seatsData.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onSeatsDataChanged(oldval_seatsData);
					}
				}
			}

		}
	}
}