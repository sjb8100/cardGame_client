/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;



	public class DATATYPE_PLAYER_INFOS : DATATYPE_BASE
	{
		public PLAYER_INFOS createFromStreamEx(MemoryStream stream)
		{
			PLAYER_INFOS datas = new PLAYER_INFOS();
			datas.id = stream.readInt32();
			datas.name = stream.readUnicode();
			datas.winCount = stream.readUint16();
			datas.loseCount = stream.readUint16();
			datas.isReady = stream.readInt8();
			datas.seatIndex = stream.readInt8();
			datas.isRoomMaster = stream.readInt8();
			return datas;
		}

		public void addToStreamEx(Bundle stream, PLAYER_INFOS v)
		{
			stream.writeInt32(v.id);
			stream.writeUnicode(v.name);
			stream.writeUint16(v.winCount);
			stream.writeUint16(v.loseCount);
			stream.writeInt8(v.isReady);
			stream.writeInt8(v.seatIndex);
			stream.writeInt8(v.isRoomMaster);
		}
	}



	public class DATATYPE_SEATS_INFO : DATATYPE_BASE
	{
		private DATATYPE__SEATS_INFO_values_ArrayType_ChildArray values_DataType = new DATATYPE__SEATS_INFO_values_ArrayType_ChildArray();

		public class DATATYPE__SEATS_INFO_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_PLAYER_INFOS itemType = new DATATYPE_PLAYER_INFOS();

			public List<PLAYER_INFOS> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<PLAYER_INFOS> datas = new List<PLAYER_INFOS>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<PLAYER_INFOS> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public SEATS_INFO createFromStreamEx(MemoryStream stream)
		{
			SEATS_INFO datas = new SEATS_INFO();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, SEATS_INFO v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}



	public class DATATYPE_ROOM_INFOS : DATATYPE_BASE
	{
		public ROOM_INFOS createFromStreamEx(MemoryStream stream)
		{
			ROOM_INFOS datas = new ROOM_INFOS();
			datas.roomKey = stream.readUint64();
			datas.name = stream.readUnicode();
			datas.intro = stream.readUnicode();
			datas.playerCount = stream.readUint8();
			datas.isPlaying = stream.readUint8();
			datas.hasPassword = stream.readUint8();
			return datas;
		}

		public void addToStreamEx(Bundle stream, ROOM_INFOS v)
		{
			stream.writeUint64(v.roomKey);
			stream.writeUnicode(v.name);
			stream.writeUnicode(v.intro);
			stream.writeUint8(v.playerCount);
			stream.writeUint8(v.isPlaying);
			stream.writeUint8(v.hasPassword);
		}
	}



	public class DATATYPE_ROOM_INFOS_LIST : DATATYPE_BASE
	{
		private DATATYPE__ROOM_INFOS_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__ROOM_INFOS_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__ROOM_INFOS_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_ROOM_INFOS itemType = new DATATYPE_ROOM_INFOS();

			public List<ROOM_INFOS> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<ROOM_INFOS> datas = new List<ROOM_INFOS>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<ROOM_INFOS> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public ROOM_INFOS_LIST createFromStreamEx(MemoryStream stream)
		{
			ROOM_INFOS_LIST datas = new ROOM_INFOS_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, ROOM_INFOS_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}



	public class DATATYPE_AnonymousArray_28 : DATATYPE_BASE
	{
		public List<Int32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<Int32> datas = new List<Int32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<Int32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_29 : DATATYPE_BASE
	{
		public List<Int32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<Int32> datas = new List<Int32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<Int32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_30 : DATATYPE_BASE
	{
		public List<Int32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<Int32> datas = new List<Int32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<Int32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_31 : DATATYPE_BASE
	{
		public List<Int32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<Int32> datas = new List<Int32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<Int32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_32 : DATATYPE_BASE
	{
		public List<Int32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<Int32> datas = new List<Int32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<Int32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AnonymousArray_33 : DATATYPE_BASE
	{
		public List<Int32> createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			List<Int32> datas = new List<Int32>();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, List<Int32> v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}


}